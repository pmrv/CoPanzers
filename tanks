#!/usr/bin/env python3

# Copyright (C) 2014 Marvin Poul <ponder@creshal.de>
import argparse
import sys
import logging
import math
import ctypes
from types import SimpleNamespace

import ecs

import copanzers
from copanzers.systems import *
from copanzers.make import Maker
from copanzers.util import gfx

def init_demo (maker, w, h, args):

    maker.make_level(args.level if args.level is not None
                                else "presets/levels/demo.json")

def init_match (maker, w, h, args):

    n = len (args.scripts)
    offset = 100

    for i in range (n):
        maker ["ScriptedTank"] (
                args.scripts [i],
                pos = (offset + i * (w - 2 * offset) / (n - 1 if n > 1 else 1), h * .5)
        )

def main (fps, w, h):

    parser = argparse.ArgumentParser (prog = "tanks")
    parser.add_argument ("--verbose", "-v", action = "count", default = 0,
            help = "Can be given multiple times to increase verbosity.")
    parser.add_argument ("--quiet",   "-q", action = "count", default = 0,
            help = "Can be given multiple times to increase quietness.")
    parser.add_argument ("--script",  "-l", action = "store_true",
            help = "Only print logs from the script routines.")
    parser.add_argument ("--speed",   "-s", default = 1, type = float,
            help = "Factor how fast the game should play (default: 1).")
    parser.set_defaults (init = lambda *_: parser.print_help() or sys.exit(1))

    subs = parser.add_subparsers ()
    demo_parser = subs.add_parser ("demo")
    demo_parser.set_defaults (init = init_demo)
    demo_parser.add_argument("-l", "--level", default = None,
                             help = "Path to the level to load.")

    match_parser = subs.add_parser ("match")
    match_parser.add_argument ("scripts", nargs = "+",
            help = "Paths to script files that should battle each other.")
    match_parser.set_defaults (init = init_match)

    args = parser.parse_args ()

    root_logger = logging.getLogger ()
    root_handler = logging.StreamHandler (sys.stderr)
    root_handler.setFormatter (
        logging.Formatter ("%(levelname)s %(name)s\n\t%(message)s\n"))
    root_logger.addHandler (root_handler)
    root_logger.setLevel (
        logging.WARNING + 10 * (args.quiet - args.verbose))

    if args.script:
        root_filter = logging.Filter ("copanzers.scripts")
        root_handler.addFilter (root_filter)

    SDL_INIT_VIDEO = 0x20
    if gfx.sdl.SDL_Init(SDL_INIT_VIDEO) != 0:
        root_logger("Failed to initialize SDL: "
                  + gfx.sdl.SDL_GetError().decode("utf8"))

    gfx.sdl.SDL_CreateWindowAndRenderer(w, h, 0,
                                        ctypes.byref(gfx.window),
                                        ctypes.byref(gfx.renderer))
    if gfx.window.value == None or gfx.renderer.value == None:
        root_logger("Failed to create window/renderer: "
                  + gfx.sdl.SDL_GetError().decode("utf8"))

    # TODO: timing & clock stuff

    entity_manager = ecs.managers.EntityManager ()
    system_manager = ecs.managers.SystemManager (entity_manager)

    # small helper class to give scripts easy access to some misc info
    # we could use a dictionary, but game.time is shorter than game ["time"]
    # and we only need one instance anyway
    class GameInfo(SimpleNamespace):
        pass

    game = GameInfo ()
    game.size = (w, h)
    game.time = 0

    maker = Maker (entity_manager, game, "presets/entities")

    system_manager.add_system (MovementSystem (w, h))
    system_manager.add_system (HealthSystem ())
    system_manager.add_system (WeaponSystem (maker))
    system_manager.add_system (MountSystem ())
    system_manager.add_system (CollisionSystem ())
    system_manager.add_system (VisionSystem ())
    system_manager.add_system (ScriptSystem ())
    system_manager.add_system (RenderSystem ())
    system_manager.add_system (HealthRenderSystem ())
    system_manager.add_system (KillSystem ())
    args.init (maker, w, h, args)

    dt = args.speed / fps

    while 1:

        """
        for e in pygame.event.get ():
            if e.type == QUIT: return
            """

        gfx.sdl.SDL_RenderClear(gfx.renderer)
        system_manager.update (dt)
        gfx.sdl.SDL_RenderPresent(gfx.renderer)
        gfx.sdl.SDL_Delay(ctypes.c_double(1000/fps))
        game.time += dt

if __name__ == "__main__":
    main (30, 640, 340)
